{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Data_Lab2.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "7Nosvz-Wb8XL",
        "outputId": "99c2d76f-fee9-4846-a7a0-5b9017148f86"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-23d62248-e487-4897-b0c0-132a0ea06f84\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-23d62248-e487-4897-b0c0-132a0ea06f84\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving car.csv to car.csv\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Linear regression model\n",
        "import pandas as pd"
      ],
      "metadata": {
        "id": "jrBcfHf4e5zj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data1 = pd.read_csv('car.csv')\n",
        "data1.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "WTruffPpe_lD",
        "outputId": "c5e381d3-e423-4bef-8727-38119006e543"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-cb50020c-7e39-4acc-8bb0-877076fa682a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Car_Name</th>\n",
              "      <th>Year</th>\n",
              "      <th>Selling_Price</th>\n",
              "      <th>Present_Price</th>\n",
              "      <th>Kms_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Seller_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ritz</td>\n",
              "      <td>2014</td>\n",
              "      <td>3.35</td>\n",
              "      <td>5.59</td>\n",
              "      <td>27000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Dealer</td>\n",
              "      <td>Manual</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>sx4</td>\n",
              "      <td>2013</td>\n",
              "      <td>4.75</td>\n",
              "      <td>9.54</td>\n",
              "      <td>43000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Dealer</td>\n",
              "      <td>Manual</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ciaz</td>\n",
              "      <td>2017</td>\n",
              "      <td>7.25</td>\n",
              "      <td>9.85</td>\n",
              "      <td>6900</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Dealer</td>\n",
              "      <td>Manual</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>wagon r</td>\n",
              "      <td>2011</td>\n",
              "      <td>2.85</td>\n",
              "      <td>4.15</td>\n",
              "      <td>5200</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Dealer</td>\n",
              "      <td>Manual</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>swift</td>\n",
              "      <td>2014</td>\n",
              "      <td>4.60</td>\n",
              "      <td>6.87</td>\n",
              "      <td>42450</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Dealer</td>\n",
              "      <td>Manual</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb50020c-7e39-4acc-8bb0-877076fa682a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-cb50020c-7e39-4acc-8bb0-877076fa682a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-cb50020c-7e39-4acc-8bb0-877076fa682a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "  Car_Name  Year  Selling_Price  ...  Seller_Type  Transmission Owner\n",
              "0     ritz  2014           3.35  ...       Dealer        Manual     0\n",
              "1      sx4  2013           4.75  ...       Dealer        Manual     0\n",
              "2     ciaz  2017           7.25  ...       Dealer        Manual     0\n",
              "3  wagon r  2011           2.85  ...       Dealer        Manual     0\n",
              "4    swift  2014           4.60  ...       Dealer        Manual     0\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data1.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "-gt73NEOfFQo",
        "outputId": "0b655ee0-f6c2-4c42-cec5-f049c10134fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-7f615803-1dfe-44df-a93a-b9af193d7cf3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Selling_Price</th>\n",
              "      <th>Present_Price</th>\n",
              "      <th>Kms_Driven</th>\n",
              "      <th>Owner</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>301.000000</td>\n",
              "      <td>301.000000</td>\n",
              "      <td>301.000000</td>\n",
              "      <td>301.000000</td>\n",
              "      <td>301.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2013.627907</td>\n",
              "      <td>4.661296</td>\n",
              "      <td>7.628472</td>\n",
              "      <td>36947.205980</td>\n",
              "      <td>0.043189</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.891554</td>\n",
              "      <td>5.082812</td>\n",
              "      <td>8.644115</td>\n",
              "      <td>38886.883882</td>\n",
              "      <td>0.247915</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2003.000000</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>0.320000</td>\n",
              "      <td>500.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2012.000000</td>\n",
              "      <td>0.900000</td>\n",
              "      <td>1.200000</td>\n",
              "      <td>15000.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2014.000000</td>\n",
              "      <td>3.600000</td>\n",
              "      <td>6.400000</td>\n",
              "      <td>32000.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2016.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>9.900000</td>\n",
              "      <td>48767.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2018.000000</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>92.600000</td>\n",
              "      <td>500000.000000</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7f615803-1dfe-44df-a93a-b9af193d7cf3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7f615803-1dfe-44df-a93a-b9af193d7cf3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7f615803-1dfe-44df-a93a-b9af193d7cf3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "              Year  Selling_Price  Present_Price     Kms_Driven       Owner\n",
              "count   301.000000     301.000000     301.000000     301.000000  301.000000\n",
              "mean   2013.627907       4.661296       7.628472   36947.205980    0.043189\n",
              "std       2.891554       5.082812       8.644115   38886.883882    0.247915\n",
              "min    2003.000000       0.100000       0.320000     500.000000    0.000000\n",
              "25%    2012.000000       0.900000       1.200000   15000.000000    0.000000\n",
              "50%    2014.000000       3.600000       6.400000   32000.000000    0.000000\n",
              "75%    2016.000000       6.000000       9.900000   48767.000000    0.000000\n",
              "max    2018.000000      35.000000      92.600000  500000.000000    3.000000"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Extract data from Selling Price column is a variable name X "
      ],
      "metadata": {
        "id": "o2PXGrhTfJe3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = data1[\"Selling_Price\"]\n",
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kiULKkeWfLvO",
        "outputId": "c1ccbe69-d10a-4810-ec38-d86144f57d82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       3.35\n",
              "1       4.75\n",
              "2       7.25\n",
              "3       2.85\n",
              "4       4.60\n",
              "       ...  \n",
              "296     9.50\n",
              "297     4.00\n",
              "298     3.35\n",
              "299    11.50\n",
              "300     5.30\n",
              "Name: Selling_Price, Length: 301, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 3. Extract data from Kilometers Driven column is a variable Y"
      ],
      "metadata": {
        "id": "amQRp4mjfbPk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y = data1[\"Present_Price\"]\n",
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b1E_lFDxfh8m",
        "outputId": "a3ce2ec3-c62c-4780-f599-d1447fd85016"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       5.59\n",
              "1       9.54\n",
              "2       9.85\n",
              "3       4.15\n",
              "4       6.87\n",
              "       ...  \n",
              "296    11.60\n",
              "297     5.90\n",
              "298    11.00\n",
              "299    12.50\n",
              "300     5.90\n",
              "Name: Present_Price, Length: 301, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 4. Divide the dataset into two parts for training and testing in 66% and 34%"
      ],
      "metadata": {
        "id": "KTSB29v-fzun"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "8ayWJPHOf308"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.34, random_state=27)"
      ],
      "metadata": {
        "id": "KLtYXN_Jf6iZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_reshaped= X_train.values.reshape(-1,1)\n",
        "y_train_reshaped= y_train.values.reshape(-1,1)\n",
        "X_test_reshaped= X_test.values.reshape(-1,1)\n",
        "y_test_reshaped= y_test.values.reshape(-1,1)"
      ],
      "metadata": {
        "id": "yw2Fjvz3f-z2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_reshaped"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gRuM9Jw1gcJo",
        "outputId": "99d86fed-6708-4d11-f38f-2761e758454c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1.  ],\n",
              "       [ 7.5 ],\n",
              "       [ 3.1 ],\n",
              "       [ 2.55],\n",
              "       [ 3.25],\n",
              "       [ 0.45],\n",
              "       [ 0.4 ],\n",
              "       [ 2.9 ],\n",
              "       [ 7.45],\n",
              "       [ 5.5 ],\n",
              "       [ 1.25],\n",
              "       [ 5.25],\n",
              "       [ 0.48],\n",
              "       [ 0.25],\n",
              "       [ 0.9 ],\n",
              "       [ 5.75],\n",
              "       [ 2.  ],\n",
              "       [ 2.1 ],\n",
              "       [ 1.05],\n",
              "       [ 0.27],\n",
              "       [ 3.75],\n",
              "       [ 0.15],\n",
              "       [ 4.5 ],\n",
              "       [ 5.85],\n",
              "       [ 8.65],\n",
              "       [ 3.  ],\n",
              "       [ 5.25],\n",
              "       [ 1.35],\n",
              "       [ 3.9 ],\n",
              "       [ 6.1 ],\n",
              "       [ 5.25],\n",
              "       [ 3.35],\n",
              "       [ 3.6 ],\n",
              "       [23.  ],\n",
              "       [ 6.7 ],\n",
              "       [ 0.51],\n",
              "       [ 7.9 ],\n",
              "       [14.9 ],\n",
              "       [ 5.5 ],\n",
              "       [18.75],\n",
              "       [ 1.2 ],\n",
              "       [ 6.25],\n",
              "       [ 5.95],\n",
              "       [ 4.75],\n",
              "       [ 4.5 ],\n",
              "       [ 1.15],\n",
              "       [ 5.75],\n",
              "       [ 5.11],\n",
              "       [ 5.4 ],\n",
              "       [11.5 ],\n",
              "       [ 1.05],\n",
              "       [ 1.45],\n",
              "       [ 9.15],\n",
              "       [ 0.3 ],\n",
              "       [ 6.85],\n",
              "       [ 0.9 ],\n",
              "       [ 6.95],\n",
              "       [ 4.  ],\n",
              "       [ 0.75],\n",
              "       [ 4.75],\n",
              "       [18.  ],\n",
              "       [ 8.4 ],\n",
              "       [ 7.2 ],\n",
              "       [ 0.55],\n",
              "       [ 7.45],\n",
              "       [ 4.1 ],\n",
              "       [ 0.48],\n",
              "       [ 4.  ],\n",
              "       [ 8.5 ],\n",
              "       [ 4.95],\n",
              "       [ 5.  ],\n",
              "       [ 2.85],\n",
              "       [ 2.95],\n",
              "       [ 0.65],\n",
              "       [ 1.1 ],\n",
              "       [ 0.38],\n",
              "       [ 1.15],\n",
              "       [ 4.65],\n",
              "       [20.75],\n",
              "       [ 5.5 ],\n",
              "       [ 0.2 ],\n",
              "       [ 4.95],\n",
              "       [ 5.25],\n",
              "       [ 8.35],\n",
              "       [ 3.51],\n",
              "       [ 0.75],\n",
              "       [ 1.05],\n",
              "       [12.5 ],\n",
              "       [ 4.4 ],\n",
              "       [ 6.15],\n",
              "       [ 7.05],\n",
              "       [ 0.2 ],\n",
              "       [ 0.1 ],\n",
              "       [ 0.5 ],\n",
              "       [ 8.25],\n",
              "       [ 0.75],\n",
              "       [ 8.4 ],\n",
              "       [ 4.5 ],\n",
              "       [ 0.48],\n",
              "       [ 6.75],\n",
              "       [ 5.9 ],\n",
              "       [ 0.2 ],\n",
              "       [ 5.25],\n",
              "       [ 0.5 ],\n",
              "       [ 1.1 ],\n",
              "       [ 1.95],\n",
              "       [ 0.18],\n",
              "       [ 0.6 ],\n",
              "       [ 0.4 ],\n",
              "       [ 0.6 ],\n",
              "       [ 0.8 ],\n",
              "       [11.25],\n",
              "       [ 0.95],\n",
              "       [ 5.15],\n",
              "       [23.  ],\n",
              "       [ 6.4 ],\n",
              "       [ 2.95],\n",
              "       [ 7.5 ],\n",
              "       [ 0.3 ],\n",
              "       [ 0.16],\n",
              "       [ 0.12],\n",
              "       [ 9.1 ],\n",
              "       [ 7.25],\n",
              "       [ 8.55],\n",
              "       [ 9.25],\n",
              "       [ 0.45],\n",
              "       [14.73],\n",
              "       [ 1.15],\n",
              "       [ 1.75],\n",
              "       [ 7.4 ],\n",
              "       [ 5.2 ],\n",
              "       [ 9.5 ],\n",
              "       [ 5.5 ],\n",
              "       [ 3.35],\n",
              "       [ 3.49],\n",
              "       [ 0.45],\n",
              "       [ 3.5 ],\n",
              "       [ 0.42],\n",
              "       [ 1.25],\n",
              "       [ 2.5 ],\n",
              "       [ 1.65],\n",
              "       [ 0.25],\n",
              "       [ 2.65],\n",
              "       [ 4.15],\n",
              "       [ 2.25],\n",
              "       [ 9.25],\n",
              "       [ 4.8 ],\n",
              "       [ 3.  ],\n",
              "       [ 5.25],\n",
              "       [ 6.5 ],\n",
              "       [ 2.55],\n",
              "       [10.9 ],\n",
              "       [ 4.75],\n",
              "       [ 3.95],\n",
              "       [ 1.15],\n",
              "       [ 0.31],\n",
              "       [ 8.99],\n",
              "       [ 1.2 ],\n",
              "       [ 0.5 ],\n",
              "       [33.  ],\n",
              "       [ 0.17],\n",
              "       [ 2.65],\n",
              "       [ 1.95],\n",
              "       [ 7.75],\n",
              "       [ 4.75],\n",
              "       [ 0.5 ],\n",
              "       [ 5.3 ],\n",
              "       [ 0.72],\n",
              "       [ 9.65],\n",
              "       [ 0.35],\n",
              "       [ 8.25],\n",
              "       [ 6.  ],\n",
              "       [16.  ],\n",
              "       [ 0.25],\n",
              "       [23.  ],\n",
              "       [ 2.75],\n",
              "       [ 6.45],\n",
              "       [ 3.9 ],\n",
              "       [12.9 ],\n",
              "       [14.5 ],\n",
              "       [ 7.75],\n",
              "       [ 0.45],\n",
              "       [ 4.6 ],\n",
              "       [ 0.35],\n",
              "       [ 0.38],\n",
              "       [ 2.7 ],\n",
              "       [ 0.4 ],\n",
              "       [ 0.2 ],\n",
              "       [ 0.75],\n",
              "       [ 7.25],\n",
              "       [ 0.6 ],\n",
              "       [ 3.  ],\n",
              "       [ 2.9 ],\n",
              "       [ 3.25],\n",
              "       [ 5.35],\n",
              "       [ 2.35],\n",
              "       [ 0.25],\n",
              "       [ 2.65]])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create and train linear regression model on training set"
      ],
      "metadata": {
        "id": "oK1ap72Igipu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression"
      ],
      "metadata": {
        "id": "zSJUgEUkgksg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lin_reg = LinearRegression().fit(X_train_reshaped,y_train_reshaped)"
      ],
      "metadata": {
        "id": "C7GhbR4BgmZ3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Make prediction based on the testing set using the trained model"
      ],
      "metadata": {
        "id": "UttctIwdgopr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = lin_reg.predict(X_test_reshaped)\n",
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UX-5PFBhgqvz",
        "outputId": "f3db13dc-7f83-4d73-8127-3c8273d54383"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 2.35291519],\n",
              "       [ 5.68926691],\n",
              "       [ 8.43685067],\n",
              "       [ 5.29675494],\n",
              "       [16.54876464],\n",
              "       [23.81023601],\n",
              "       [ 5.3621736 ],\n",
              "       [ 8.96019996],\n",
              "       [ 3.02018553],\n",
              "       [ 6.80138414],\n",
              "       [ 7.78266406],\n",
              "       [32.31466195],\n",
              "       [16.28708999],\n",
              "       [13.01615694],\n",
              "       [ 2.15665921],\n",
              "       [ 2.24824533],\n",
              "       [16.28708999],\n",
              "       [ 2.09124055],\n",
              "       [ 5.62384824],\n",
              "       [20.21220966],\n",
              "       [ 2.15665921],\n",
              "       [ 4.83882431],\n",
              "       [14.97871677],\n",
              "       [ 1.8295659 ],\n",
              "       [ 9.74522389],\n",
              "       [ 5.62384824],\n",
              "       [ 7.97892004],\n",
              "       [ 2.41833385],\n",
              "       [ 9.41813058],\n",
              "       [13.67034355],\n",
              "       [ 3.53045109],\n",
              "       [ 2.94168314],\n",
              "       [ 7.45557075],\n",
              "       [27.72227194],\n",
              "       [ 2.58842237],\n",
              "       [ 7.45557075],\n",
              "       [ 2.41833385],\n",
              "       [11.70778372],\n",
              "       [ 7.84808272],\n",
              "       [ 7.45557075],\n",
              "       [10.0723172 ],\n",
              "       [16.9412766 ],\n",
              "       [ 5.62384824],\n",
              "       [47.36095399],\n",
              "       [ 2.15665921],\n",
              "       [ 6.73596548],\n",
              "       [ 4.51173101],\n",
              "       [ 6.14719753],\n",
              "       [ 9.2218746 ],\n",
              "       [ 5.29675494],\n",
              "       [ 1.96040323],\n",
              "       [ 7.78266406],\n",
              "       [ 2.15665921],\n",
              "       [ 2.28749653],\n",
              "       [ 7.45557075],\n",
              "       [ 9.41813058],\n",
              "       [ 9.15645594],\n",
              "       [ 8.63310665],\n",
              "       [ 7.97892004],\n",
              "       [ 2.35291519],\n",
              "       [ 2.11740801],\n",
              "       [ 3.33419511],\n",
              "       [ 6.47429084],\n",
              "       [ 7.25931477],\n",
              "       [ 3.79212574],\n",
              "       [10.20315452],\n",
              "       [ 2.35291519],\n",
              "       [ 5.16591762],\n",
              "       [ 5.82010423],\n",
              "       [ 2.02582189],\n",
              "       [ 6.34345352],\n",
              "       [ 2.35291519],\n",
              "       [ 6.80138414],\n",
              "       [ 3.0071018 ],\n",
              "       [11.38069042],\n",
              "       [ 2.94168314],\n",
              "       [ 2.22207787],\n",
              "       [27.40826237],\n",
              "       [ 2.19591041],\n",
              "       [ 8.50226933],\n",
              "       [ 6.5397095 ],\n",
              "       [ 5.49301092],\n",
              "       [ 7.91350138],\n",
              "       [ 6.80138414],\n",
              "       [ 7.32473343],\n",
              "       [ 1.89498456],\n",
              "       [ 2.02582189],\n",
              "       [ 6.08177887],\n",
              "       [ 6.93222147],\n",
              "       [ 2.41833385],\n",
              "       [ 3.13793912],\n",
              "       [14.79554452],\n",
              "       [ 8.76394397],\n",
              "       [ 7.32473343],\n",
              "       [14.2591115 ],\n",
              "       [ 1.8295659 ],\n",
              "       [ 4.51173101],\n",
              "       [11.31527176],\n",
              "       [ 2.09124055],\n",
              "       [ 2.35291519],\n",
              "       [ 9.35271192],\n",
              "       [ 3.33419511],\n",
              "       [ 9.41813058]])"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred1 = lin_reg.predict(y_test_reshaped)\n",
        "y_pred1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DJqe4RMfgtIV",
        "outputId": "17421fff-8fae-47f2-9e66-36523ee030fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  3.13793912],\n",
              "       [  7.36398463],\n",
              "       [  9.28729326],\n",
              "       [  6.99764013],\n",
              "       [ 20.9187312 ],\n",
              "       [ 25.9559681 ],\n",
              "       [  7.36398463],\n",
              "       [ 11.9040397 ],\n",
              "       [  3.49119989],\n",
              "       [  9.28729326],\n",
              "       [ 10.89659232],\n",
              "       [ 48.61699228],\n",
              "       [ 19.36176706],\n",
              "       [ 13.19932919],\n",
              "       [  2.2744128 ],\n",
              "       [  2.79776209],\n",
              "       [ 19.36176706],\n",
              "       [  2.2744128 ],\n",
              "       [ 10.45174543],\n",
              "       [ 28.92597531],\n",
              "       [  2.2744128 ],\n",
              "       [  6.0948626 ],\n",
              "       [ 19.36176706],\n",
              "       [  2.54917118],\n",
              "       [ 19.36176706],\n",
              "       [  7.36398463],\n",
              "       [ 13.25166412],\n",
              "       [  2.62767357],\n",
              "       [ 12.55822631],\n",
              "       [ 14.42920002],\n",
              "       [ 17.72630054],\n",
              "       [  3.21644152],\n",
              "       [ 17.89638906],\n",
              "       [ 48.61699228],\n",
              "       [  2.66692477],\n",
              "       [ 11.64236506],\n",
              "       [  2.59758098],\n",
              "       [ 13.72267848],\n",
              "       [  9.15645594],\n",
              "       [  9.94147987],\n",
              "       [ 12.83298469],\n",
              "       [ 20.9187312 ],\n",
              "       [  7.58640808],\n",
              "       [122.72325151],\n",
              "       [  2.81084582],\n",
              "       [ 10.41249423],\n",
              "       [ 11.38069042],\n",
              "       [  7.36398463],\n",
              "       [ 25.9167169 ],\n",
              "       [  6.27803485],\n",
              "       [  2.2351616 ],\n",
              "       [ 10.66108514],\n",
              "       [  2.28749653],\n",
              "       [  2.66692477],\n",
              "       [ 10.45174543],\n",
              "       [ 11.51152774],\n",
              "       [ 11.65544879],\n",
              "       [  9.54896791],\n",
              "       [  9.03870235],\n",
              "       [  2.81084582],\n",
              "       [  2.52300371],\n",
              "       [  3.49119989],\n",
              "       [ 10.45174543],\n",
              "       [ 19.54493931],\n",
              "       [  3.94913052],\n",
              "       [ 11.64236506],\n",
              "       [  2.62767357],\n",
              "       [ 14.92638184],\n",
              "       [ 10.45174543],\n",
              "       [  2.24824533],\n",
              "       [ 10.72650381],\n",
              "       [  2.66692477],\n",
              "       [  9.15645594],\n",
              "       [  3.49119989],\n",
              "       [ 14.65162347],\n",
              "       [  3.09868793],\n",
              "       [  2.86318075],\n",
              "       [ 31.85673132],\n",
              "       [  2.2351616 ],\n",
              "       [ 10.46482916],\n",
              "       [ 25.9167169 ],\n",
              "       [  6.48737457],\n",
              "       [  9.02561862],\n",
              "       [ 10.72650381],\n",
              "       [  9.02561862],\n",
              "       [  2.24824533],\n",
              "       [  4.5509822 ],\n",
              "       [  9.48354925],\n",
              "       [ 10.46482916],\n",
              "       [  3.13793912],\n",
              "       [  3.89679559],\n",
              "       [ 19.36176706],\n",
              "       [  9.37887939],\n",
              "       [ 10.89659232],\n",
              "       [ 19.36176706],\n",
              "       [  2.41833385],\n",
              "       [ 12.00870956],\n",
              "       [ 13.23858039],\n",
              "       [  2.40525012],\n",
              "       [  2.66692477],\n",
              "       [ 13.86659954],\n",
              "       [  6.08177887],\n",
              "       [ 10.05923346]])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train_pred = lin_reg.predict(X_test_reshaped)\n",
        "y_train_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C5ns9WkygvJj",
        "outputId": "1d7f122a-0968-468b-9907-2e16f89bcfaa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 2.35291519],\n",
              "       [ 5.68926691],\n",
              "       [ 8.43685067],\n",
              "       [ 5.29675494],\n",
              "       [16.54876464],\n",
              "       [23.81023601],\n",
              "       [ 5.3621736 ],\n",
              "       [ 8.96019996],\n",
              "       [ 3.02018553],\n",
              "       [ 6.80138414],\n",
              "       [ 7.78266406],\n",
              "       [32.31466195],\n",
              "       [16.28708999],\n",
              "       [13.01615694],\n",
              "       [ 2.15665921],\n",
              "       [ 2.24824533],\n",
              "       [16.28708999],\n",
              "       [ 2.09124055],\n",
              "       [ 5.62384824],\n",
              "       [20.21220966],\n",
              "       [ 2.15665921],\n",
              "       [ 4.83882431],\n",
              "       [14.97871677],\n",
              "       [ 1.8295659 ],\n",
              "       [ 9.74522389],\n",
              "       [ 5.62384824],\n",
              "       [ 7.97892004],\n",
              "       [ 2.41833385],\n",
              "       [ 9.41813058],\n",
              "       [13.67034355],\n",
              "       [ 3.53045109],\n",
              "       [ 2.94168314],\n",
              "       [ 7.45557075],\n",
              "       [27.72227194],\n",
              "       [ 2.58842237],\n",
              "       [ 7.45557075],\n",
              "       [ 2.41833385],\n",
              "       [11.70778372],\n",
              "       [ 7.84808272],\n",
              "       [ 7.45557075],\n",
              "       [10.0723172 ],\n",
              "       [16.9412766 ],\n",
              "       [ 5.62384824],\n",
              "       [47.36095399],\n",
              "       [ 2.15665921],\n",
              "       [ 6.73596548],\n",
              "       [ 4.51173101],\n",
              "       [ 6.14719753],\n",
              "       [ 9.2218746 ],\n",
              "       [ 5.29675494],\n",
              "       [ 1.96040323],\n",
              "       [ 7.78266406],\n",
              "       [ 2.15665921],\n",
              "       [ 2.28749653],\n",
              "       [ 7.45557075],\n",
              "       [ 9.41813058],\n",
              "       [ 9.15645594],\n",
              "       [ 8.63310665],\n",
              "       [ 7.97892004],\n",
              "       [ 2.35291519],\n",
              "       [ 2.11740801],\n",
              "       [ 3.33419511],\n",
              "       [ 6.47429084],\n",
              "       [ 7.25931477],\n",
              "       [ 3.79212574],\n",
              "       [10.20315452],\n",
              "       [ 2.35291519],\n",
              "       [ 5.16591762],\n",
              "       [ 5.82010423],\n",
              "       [ 2.02582189],\n",
              "       [ 6.34345352],\n",
              "       [ 2.35291519],\n",
              "       [ 6.80138414],\n",
              "       [ 3.0071018 ],\n",
              "       [11.38069042],\n",
              "       [ 2.94168314],\n",
              "       [ 2.22207787],\n",
              "       [27.40826237],\n",
              "       [ 2.19591041],\n",
              "       [ 8.50226933],\n",
              "       [ 6.5397095 ],\n",
              "       [ 5.49301092],\n",
              "       [ 7.91350138],\n",
              "       [ 6.80138414],\n",
              "       [ 7.32473343],\n",
              "       [ 1.89498456],\n",
              "       [ 2.02582189],\n",
              "       [ 6.08177887],\n",
              "       [ 6.93222147],\n",
              "       [ 2.41833385],\n",
              "       [ 3.13793912],\n",
              "       [14.79554452],\n",
              "       [ 8.76394397],\n",
              "       [ 7.32473343],\n",
              "       [14.2591115 ],\n",
              "       [ 1.8295659 ],\n",
              "       [ 4.51173101],\n",
              "       [11.31527176],\n",
              "       [ 2.09124055],\n",
              "       [ 2.35291519],\n",
              "       [ 9.35271192],\n",
              "       [ 3.33419511],\n",
              "       [ 9.41813058]])"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(lin_reg.coef_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dsBoGNMkgxGt",
        "outputId": "77f56eea-4b37-4dc7-ff85-2b3eb7e16054"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1.30837322]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(lin_reg.intercept_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8sC8N-bVgzZy",
        "outputId": "e45c8b97-0b4c-4308-9d33-3afdf53f754e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.56789126]\n"
          ]
        }
      ]
    }
  ]
}